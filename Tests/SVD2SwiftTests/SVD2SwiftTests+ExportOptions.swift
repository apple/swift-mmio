//===----------------------------------------------------------*- swift -*-===//
//
// This source file is part of the Swift MMIO open source project
//
// Copyright (c) 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
//
//===----------------------------------------------------------------------===//

@testable import SVD
@testable import SVD2Swift

// swift-format-ignore: AlwaysUseLowerCamelCase
extension SVD2SwiftTests {
  // This device has ~minimal content used only to validate output options.
  // Other tests should create their own device for targeted test cases.
  private static let testOutputOptionsDevice = SVDDevice(
    name: "ExampleDevice",
    description: "An example device",
    addressUnitBits: 8,
    width: 32,
    registerProperties: .init(),
    peripherals: .init(
      peripheral: [
        .init(
          name: "ExamplePeripheral",
          description: "An example peripheral",
          baseAddress: 0x1000,
          registers: .init(
            cluster: [],
            register: [
              .init(
                name: "ExampleRegister",
                description: "An example register",
                addressOffset: 0x20,
                fields: .init(field: [
                  .init(
                    name: "ExampleField",
                    bitRange: .lsbMsb(.init(lsb: 4, msb: 10)))
                ]))
            ]))
      ]))

  func test_outputOptions_default() throws {
    XCTAssertSVD2SwiftOutput(
      svdDevice: Self.testOutputOptionsDevice,
      options: .init(
        indentation: .space(2),
        accessLevel: nil,
        selectedPeripherals: [],
        namespaceUnderDevice: false,
        instanceMemberPeripherals: false,
        overrideDeviceName: nil),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        static let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        @RegisterBlock
        struct ExamplePeripheral {
          /// An example register
          @RegisterBlock(offset: 0x20)
          var exampleregister: Register<ExampleRegister>
        }

        extension ExamplePeripheral {
          /// An example register
          @Register(bitWidth: 0)
          struct ExampleRegister {
            /// ExampleField
            @ReadWrite(bits: 4..<11)
            var examplefield: ExampleField
          }
        }

        """,
      ])
  }

  func test_outputOptions_indentationTab() throws {
    XCTAssertSVD2SwiftOutput(
      svdDevice: Self.testOutputOptionsDevice,
      options: .init(
        indentation: .tab,
        accessLevel: nil,
        selectedPeripherals: [],
        namespaceUnderDevice: false,
        instanceMemberPeripherals: false,
        overrideDeviceName: nil),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        static let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        @RegisterBlock
        struct ExamplePeripheral {
        \t/// An example register
        \t@RegisterBlock(offset: 0x20)
        \tvar exampleregister: Register<ExampleRegister>
        }

        extension ExamplePeripheral {
        \t/// An example register
        \t@Register(bitWidth: 0)
        \tstruct ExampleRegister {
        \t\t/// ExampleField
        \t\t@ReadWrite(bits: 4..<11)
        \t\tvar examplefield: ExampleField
        \t}
        }

        """,
      ])
  }

  func test_outputOptions_accessLevelPublic() throws {
    XCTAssertSVD2SwiftOutput(
      svdDevice: Self.testOutputOptionsDevice,
      options: .init(
        indentation: .space(2),
        accessLevel: .public,
        selectedPeripherals: [],
        namespaceUnderDevice: false,
        instanceMemberPeripherals: false,
        overrideDeviceName: nil),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        public static let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        @RegisterBlock
        public struct ExamplePeripheral {
          /// An example register
          @RegisterBlock(offset: 0x20)
          public var exampleregister: Register<ExampleRegister>
        }

        extension ExamplePeripheral {
          /// An example register
          @Register(bitWidth: 0)
          public struct ExampleRegister {
            /// ExampleField
            @ReadWrite(bits: 4..<11)
            public var examplefield: ExampleField
          }
        }

        """,
      ])
  }

  func test_outputOptions_selectedPeripheralsFilter() throws {
    var device = Self.testOutputOptionsDevice
    device.peripherals.peripheral.append(
      .init(name: "ExamplePeripheral2", baseAddress: 0x2000))

    XCTAssertSVD2SwiftOutput(
      svdDevice: device,
      options: .init(
        indentation: .space(2),
        accessLevel: nil,
        selectedPeripherals: ["ExamplePeripheral"],
        namespaceUnderDevice: false,
        instanceMemberPeripherals: false,
        overrideDeviceName: nil),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        static let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        @RegisterBlock
        struct ExamplePeripheral {
          /// An example register
          @RegisterBlock(offset: 0x20)
          var exampleregister: Register<ExampleRegister>
        }

        extension ExamplePeripheral {
          /// An example register
          @Register(bitWidth: 0)
          struct ExampleRegister {
            /// ExampleField
            @ReadWrite(bits: 4..<11)
            var examplefield: ExampleField
          }
        }

        """,
      ])
  }

  func test_outputOptions_namespaceUnderDevice() throws {
    XCTAssertSVD2SwiftOutput(
      svdDevice: Self.testOutputOptionsDevice,
      options: .init(
        indentation: .space(2),
        accessLevel: nil,
        selectedPeripherals: [],
        namespaceUnderDevice: true,
        instanceMemberPeripherals: false,
        overrideDeviceName: nil),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example device
        enum ExampleDevice {
          /// An example peripheral
          static let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)
        }

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        extension ExamplePeripheral {
          /// An example peripheral
          @RegisterBlock
          struct ExamplePeripheral {
            /// An example register
            @RegisterBlock(offset: 0x20)
            var exampleregister: Register<ExampleRegister>
          }
        }

        extension ExampleDevice.ExamplePeripheral {
          /// An example register
          @Register(bitWidth: 0)
          struct ExampleRegister {
            /// ExampleField
            @ReadWrite(bits: 4..<11)
            var examplefield: ExampleField
          }
        }

        """,
      ])
  }

  func test_outputOptions_instanceMemberPeripherals() throws {
    XCTAssertSVD2SwiftOutput(
      svdDevice: Self.testOutputOptionsDevice,
      options: .init(
        indentation: .space(2),
        accessLevel: nil,
        selectedPeripherals: [],
        namespaceUnderDevice: false,
        instanceMemberPeripherals: true,
        overrideDeviceName: nil),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        @RegisterBlock
        struct ExamplePeripheral {
          /// An example register
          @RegisterBlock(offset: 0x20)
          var exampleregister: Register<ExampleRegister>
        }

        extension ExamplePeripheral {
          /// An example register
          @Register(bitWidth: 0)
          struct ExampleRegister {
            /// ExampleField
            @ReadWrite(bits: 4..<11)
            var examplefield: ExampleField
          }
        }

        """,
      ])
  }

  func test_outputOptions_namespaceUnderDeviceInstanceMemberPeripherals() throws {
    XCTAssertSVD2SwiftOutput(
      svdDevice: Self.testOutputOptionsDevice,
      options: .init(
        indentation: .space(2),
        accessLevel: nil,
        selectedPeripherals: [],
        namespaceUnderDevice: true,
        instanceMemberPeripherals: true,
        overrideDeviceName: nil),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example device
        struct ExampleDevice {
          /// An example peripheral
          let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)
        }

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        extension ExamplePeripheral {
          /// An example peripheral
          @RegisterBlock
          struct ExamplePeripheral {
            /// An example register
            @RegisterBlock(offset: 0x20)
            var exampleregister: Register<ExampleRegister>
          }
        }

        extension ExampleDevice.ExamplePeripheral {
          /// An example register
          @Register(bitWidth: 0)
          struct ExampleRegister {
            /// ExampleField
            @ReadWrite(bits: 4..<11)
            var examplefield: ExampleField
          }
        }

        """,
      ])
  }

  func test_outputOptions_overrideDeviceName() throws {
    XCTAssertSVD2SwiftOutput(
      svdDevice: Self.testOutputOptionsDevice,
      options: .init(
        indentation: .space(2),
        accessLevel: nil,
        selectedPeripherals: [],
        namespaceUnderDevice: true,
        instanceMemberPeripherals: false,
        overrideDeviceName: "CustomDevice"),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example device
        enum CustomDevice {
          /// An example peripheral
          static let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)
        }

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        extension CustomDevice {
          /// An example peripheral
          @RegisterBlock
          struct ExamplePeripheral {
            /// An example register
            @RegisterBlock(offset: 0x20)
            var exampleregister: Register<ExampleRegister>
          }
        }

        extension CustomDevice.ExamplePeripheral {
          /// An example register
          @Register(bitWidth: 0)
          struct ExampleRegister {
            /// ExampleField
            @ReadWrite(bits: 4..<11)
            var examplefield: ExampleField
          }
        }

        """,
      ])
  }
}
