//===----------------------------------------------------------*- swift -*-===//
//
// This source file is part of the Swift MMIO open source project
//
// Copyright (c) 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
//
//===----------------------------------------------------------------------===//

import Testing

@testable import SVD
@testable import SVD2Swift

extension SVD2SwiftTests {
  private static let testBitWidthsDevice = SVDDevice(
    name: "ExampleDevice",
    description: "An example device",
    addressUnitBits: 8,
    width: 32,
    registerProperties: .init(
      size: 32,
      access: .readWrite),
    peripherals: .init(
      peripheral: [
        .init(
          name: "ExamplePeripheral",
          description: "An example peripheral",
          baseAddress: 0x1000,
          registers: .init(
            cluster: [],
            register: [
              .init(
                name: "ExampleRegister",
                description: "An example register",
                addressOffset: 0x20,
                fields: .init(
                  field: [
                    .init(
                      name: "A",
                      bitRange: .lsbMsb(.init(lsb: 2, msb: 6))),
                    .init(
                      name: "B",
                      bitRange: .offsetWidth(.init(bitOffset: 6))),
                    .init(
                      name: "C",
                      bitRange: .offsetWidth(.init(bitOffset: 7, bitWidth: 1))),
                    .init(
                      name: "D",
                      bitRange: .offsetWidth(.init(bitOffset: 8, bitWidth: 2))),
                    .init(
                      name: "E",
                      bitRange: .literal(
                        .init(bitRange: .init(lsb: 10, msb: 14)))),
                  ]))
            ]))
      ]))

  @Test func field_bitWidths() throws {
    assertSVD2SwiftOutput(
      svdDevice: Self.testBitWidthsDevice,
      options: .init(
        indentation: .space(2),
        accessLevel: nil,
        selectedPeripherals: [],
        namespaceUnderDevice: false,
        instanceMemberPeripherals: false,
        overrideDeviceName: nil),
      expected: [
        "Device.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        let exampleperipheral = ExamplePeripheral(unsafeAddress: 0x1000)

        """,

        "ExamplePeripheral.swift": """
        // Generated by svd2swift.

        import MMIO

        /// An example peripheral
        @RegisterBlock
        struct ExamplePeripheral {
          /// An example register
          @RegisterBlock(offset: 0x20)
          var exampleregister: Register<ExampleRegister>
        }

        extension ExamplePeripheral {
          /// An example register
          @Register(bitWidth: 32)
          struct ExampleRegister {
            /// A
            @ReadWrite(bits: 2..<7)
            var a: A

            /// B
            @ReadWrite(bits: 6..<7)
            var b: B

            /// C
            @ReadWrite(bits: 7..<8)
            var c: C

            /// D
            @ReadWrite(bits: 8..<10)
            var d: D

            /// E
            @ReadWrite(bits: 10..<15)
            var e: E
          }
        }

        """,
      ])
  }
}
